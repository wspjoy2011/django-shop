"""
Django settings for django_shop project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
import socket
import warnings
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Project data paths

DATASETS_DIR_ENV = os.getenv('DATASETS_DIR')

if not DATASETS_DIR_ENV:
    warnings.warn(
        "DATASETS_DIR environment variable is not set. "
        "Dataset-related functionality may not work properly. "
        "Set DATASETS_DIR to the path containing your dataset files.",
        UserWarning,
        stacklevel=2
    )
else:
    DATASETS_DIR = Path(DATASETS_DIR_ENV)
    IMAGES_DATASET_CSV = DATASETS_DIR / 'images.csv'
    PRODUCTS_DATASET_CSV = DATASETS_DIR / 'products.csv'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ox)m@cfm+411e!drko=sa@el5+t1!#r!411pr#xm(f8&bxn1op'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Django Debug Toolbar configuration for Docker

if DEBUG:
    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [
        "127.0.0.1",
        "localhost",
    ]
    INTERNAL_IPS.extend([ip[:-1] + "1" for ip in ips])
    INTERNAL_IPS.extend(ips)
else:
    INTERNAL_IPS = ["127.0.0.1", "localhost"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Pypi third apps
    'django_extensions',
    'django_pgviews',
    'debug_toolbar',
    'rest_framework',

    # Project apps
    'apps.accounts',
    'apps.api.rest',
    'apps.cart',
    'apps.catalog',
    'apps.inventories',
    'apps.favorites',
    'apps.ratings'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',

    # Debug toolbar
    'debug_toolbar.middleware.DebugToolbarMiddleware',

    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                # Catalog navigation categories
                'apps.catalog.context_processors.categories',

                # Count user favorites products
                'apps.favorites.context_processors.favorites_context',

            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

USE_PGBOUNCER = os.getenv('USE_PGBOUNCER', 'false').lower() == 'true'

if USE_PGBOUNCER:
    PGBOUNCER_USER = os.getenv('PGBOUNCER_USER')
    PGBOUNCER_PASSWORD = os.getenv('PGBOUNCER_PASSWORD')
    PGBOUNCER_HOST = os.getenv('PGBOUNCER_HOST')
    POSTGRES_DB = os.getenv('POSTGRES_DB')

    if not all([PGBOUNCER_USER, PGBOUNCER_PASSWORD, PGBOUNCER_HOST, POSTGRES_DB]):
        raise ValueError(
            "Missing required PgBouncer environment variables:"
            " PGBOUNCER_USER, PGBOUNCER_PASSWORD, PGBOUNCER_HOST, POSTGRES_DB")

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': POSTGRES_DB,
            'USER': PGBOUNCER_USER,
            'PASSWORD': PGBOUNCER_PASSWORD,
            'HOST': PGBOUNCER_HOST,
            'PORT': os.getenv('PGBOUNCER_PORT', '6432'),
        }
    }
else:
    POSTGRES_USER = os.getenv('POSTGRES_USER')
    POSTGRES_PASSWORD = os.getenv('POSTGRES_PASSWORD')
    POSTGRES_HOST = os.getenv('POSTGRES_HOST')
    POSTGRES_DB = os.getenv('POSTGRES_DB')

    if not all([POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_HOST, POSTGRES_DB]):
        raise ValueError(
            "Missing required PostgreSQL environment variables:"
            " POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_HOST, POSTGRES_DB")

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': POSTGRES_DB,
            'USER': POSTGRES_USER,
            'PASSWORD': POSTGRES_PASSWORD,
            'HOST': POSTGRES_HOST,
            'PORT': os.getenv('POSTGRES_DB_PORT', '5432'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# User model

AUTH_USER_MODEL = 'accounts.User'

# Settings for creating Django admin superuser

ADMIN_USERNAME = os.getenv('ADMIN_USERNAME')
ADMIN_PASSWORD = os.getenv('ADMIN_PASSWORD')
ADMIN_EMAIL = os.getenv('ADMIN_EMAIL')

# DRF settings

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
}

# Cart token

CART_TOKEN_LIFETIME = timedelta(days=90)
