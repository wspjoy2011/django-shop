services:
  web:
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
    container_name: django-store
    command: [ "run-django-dev.sh" ]
    env_file:
      - .env
      - ./services/pgbouncer/.env
    environment:
      - LOG_LEVEL=debug
    volumes:
      - ./src:/usr/src/clothing-store/
      - ./datasets:/usr/src/datasets:ro
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - django-store-network

  db:
    image: 'postgres:17.4'
    restart: unless-stopped
    container_name: postgres-django-store
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres-django-store-data:/var/lib/postgresql/data/
      - ./configs/postgresql/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - django-store-network
    command: [ "postgres", "-c", "config_file=/etc/postgresql/postgresql.conf" ]
    healthcheck:
      test: >
        sh -c "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h 127.0.0.1 || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  pgbouncer:
    build:
      context: ./services/pgbouncer
      dockerfile: Dockerfile
    container_name: pgbouncer-django-store
    restart: always
    env_file:
      - .env
      - ./services/pgbouncer/.env
    ports:
      - "6432:6432"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - django-store-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${PGBOUNCER_USER} -d $${POSTGRES_DB} || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  postgres-django-store-data:
    driver: local

networks:
  django-store-network:
